Index: src/Interfaz/InBiblioteca.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Interfaz;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nimport PersistenciaDatos.Libros;\r\nimport PersistenciaDatos.ManejoArchivo;\r\nimport PersistenciaDatos.Prestamo;\r\nimport Interfaz.InCrearLib;\r\nimport Main.Principal;\r\n\r\npublic class InBiblioteca extends JFrame implements ActionListener {\r\n    // Icono\r\n    ImageIcon img = new ImageIcon(Objects.requireNonNull(getClass().getResource(\"/Imagenes/IconBiblioteca.png\")));\r\n    // panel\r\n    JPanel panel;\r\n    // Botones\r\n    JButton bCrearCuentas;\r\n    JButton bPrestarLibro;\r\n    JButton bRetornarLibro;\r\n    JButton bInfo;\r\n    JButton bVolver;\r\n    JButton bCrearLib;\r\n    // JMenuBar\r\n    JMenuBar menuBar;\r\n    JMenu estadoLibro;\r\n    JMenu personasMora;\r\n    JMenuItem mostrar;\r\n    JMenuItem terror;\r\n    JMenuItem novela;\r\n    JMenuItem inge;\r\n    // JLabel\r\n    JLabel lCrearCuenta;\r\n\r\n    // Crear un modelo de tabla y agregar los datos\r\n    DefaultTableModel model = new DefaultTableModel((Object[][]) ManejoArchivo.getDataRow(Principal.rutaArchivo), InCrearLib.getNomColumnas()) {\r\n        // Se deshabilita la opción de modificar las filas y las columnas\r\n        @Override\r\n        public boolean isCellEditable(int row, int column) {\r\n            return false;\r\n        }\r\n    };\r\n    // Crear un componente JTable con el modelo de tabla\r\n    JTable table = new JTable(model);\r\n\r\n    public InBiblioteca() {\r\n\r\n        // Configuración Panel\r\n        panel = new JPanel();\r\n        panel.setBounds(40, 120, 600, 350);\r\n        add(panel);\r\n\r\n        // Configuración Jmenubar\r\n        menuBar = new JMenuBar();\r\n\r\n        estadoLibro = new JMenu(\"Estado\");\r\n        personasMora = new JMenu(\"Personas en Mora\");\r\n\r\n        mostrar = new JMenuItem(\"Mostrar\");\r\n        mostrar.addActionListener(Action2);\r\n\r\n        terror = new JMenuItem(\"Terror\");\r\n        terror.addActionListener(Action2);\r\n        novela = new JMenuItem(\"Novela Clásica\");\r\n        novela.addActionListener(Action2);\r\n        inge = new JMenuItem(\"Ingeniería\");\r\n        inge.addActionListener(Action2);\r\n\r\n        personasMora.add(mostrar);\r\n\r\n        estadoLibro.add(terror);\r\n        estadoLibro.add(novela);\r\n        estadoLibro.add(inge);\r\n\r\n        menuBar.add(estadoLibro);\r\n        menuBar.add(personasMora);\r\n\r\n        this.setJMenuBar(menuBar);\r\n\r\n        // Configuración Label\r\n        lCrearCuenta = new JLabel(\"Crear Cuenta:\");\r\n        lCrearCuenta.setBounds(40, 480, 100, 20);\r\n        lCrearCuenta.setVisible(false);\r\n        add(lCrearCuenta);\r\n\r\n        // Configuración Botones\r\n        bCrearCuentas = new JButton(\"Crear\");\r\n        bCrearCuentas.setBounds(40, 500, 100, 20);\r\n        bCrearCuentas.setBackground(Color.green);\r\n        bCrearCuentas.setVisible(false);\r\n        bCrearCuentas.addActionListener(this);\r\n        add(bCrearCuentas);\r\n\r\n        bPrestarLibro = new JButton(\"Prestar\");\r\n        bPrestarLibro.setBounds(100, 60, 100, 40);\r\n        bPrestarLibro.setBackground(Color.RED);\r\n        bPrestarLibro.addActionListener(this);\r\n        add(bPrestarLibro);\r\n\r\n        bRetornarLibro = new JButton(\"Retornar\");\r\n        bRetornarLibro.setBounds(240, 60, 100, 40);\r\n        bRetornarLibro.setBackground(Color.RED);\r\n        bRetornarLibro.addActionListener(this);\r\n        add(bRetornarLibro);\r\n\r\n        bInfo = new JButton(\"Información\");\r\n        bInfo.setBounds(380, 60, 100, 40);\r\n        bInfo.setBackground(Color.RED);\r\n        bInfo.addActionListener(this);\r\n        add(bInfo);\r\n\r\n        bCrearLib = new JButton(\"Añadir Libro\");\r\n        bCrearLib.setBounds(520, 60, 100, 40);\r\n        bCrearLib.setBackground(Color.RED);\r\n        bCrearLib.addActionListener(this);\r\n        add(bCrearLib);\r\n\r\n        bVolver = new JButton(\"Volver\");\r\n        bVolver.setBounds(10, 10, 75, 30);\r\n        bVolver.setBackground(Color.green);\r\n        bVolver.addActionListener(this);\r\n        add(bVolver);\r\n\r\n        // Configuración Ventana\r\n        setLayout(null);\r\n        setSize(700, 600);\r\n        setTitle(\"Biblioteca\");\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n        setIconImage(img.getImage());\r\n        setVisible(true);\r\n\r\n\r\n        // Se le dan las dimensiones\r\n        table.setPreferredScrollableViewportSize(new Dimension(600, 300));\r\n        // se añade al panel y además se le agrega el método JScroll para que se visualice de forma correcta\r\n        panel.add(new JScrollPane(table));\r\n\r\n    }\r\n    public void MostrarInfo(){\r\n        // creo un iterador para recorrer multa, ListIterator recorre en cualquier dirección la lista (es un puntero)\r\n        ListIterator<Integer> data = Prestamo.multa.listIterator();\r\n        // StringBuilder permite concatenar diferentes cadenas de texto sin crear un nuevo object (es mutable, permite modificar su estado)\r\n        StringBuilder deudores = new StringBuilder();\r\n        boolean hayDeudores = false;\r\n\r\n        while (data.hasNext()) { // Me aseguro que recorra el data\r\n            int multa = data.next(); // recorro el siguiente dato\r\n            if (multa > 0) {\r\n                hayDeudores = true;\r\n                // Construir una cadena con la información de los deudores\r\n                deudores.append(\"Usuarios: \").append(Prestamo.user).append(\"\\n\").append(\"Libros: \").append(Prestamo.book)\r\n                        .append(\"\\n\").append(\"Multa correspondiente: \").append(Prestamo.multa).append(\"\\n\").append(\"Dias de atraso: \").append(Prestamo.DiasAtraso);\r\n            }\r\n            break;\r\n        }\r\n        if (hayDeudores) {\r\n            // se añade los append a el JOpcionPanel\r\n            JOptionPane.showMessageDialog(null, deudores.toString());\r\n        }\r\n    }\r\n\r\n    public void Prestarlibro() {\r\n        int indexRow = table.getSelectedRow(); // Obtengo la fila seleccionada\r\n        boolean data = (boolean) model.getValueAt(indexRow, 2); // obtengo el valor de la posición deseada\r\n        for (int i = 0; i <= table.getRowCount(); i++) {\r\n            if (data && indexRow == i){// validó que data = true y esté seleccionada la fila = i para evitar desbordamientos\r\n                //ManejoArchivo.data = new Object[indexRow][2];\r\n                model.setValueAt(false, indexRow, 2); // Muestro el dato en la tabla\r\n                //cambiarValor(ManejoArchivo.data,indexRow,2,false); // actualizo el dato en la matriz\r\n                break; // aseguro que termine la ejecución si ejecuta el bloque de código\r\n            } else if (!data && indexRow == i) { //\r\n                JOptionPane.showMessageDialog(null, \"El libro no se encuentra Disponible por el momento\");\r\n                break;\r\n            }\r\n        }\r\n        model.fireTableDataChanged(); // Actualiza la tabla\r\n\r\n        //ManejoArchivo.getDataRow(Principal.rutaArchivo);\r\n    }\r\n    public static void cambiarValor(Object[][] data, int fila, int columna, Object nuevoValor) {\r\n        data[fila][columna] = nuevoValor;\r\n    }\r\n\r\n    public void RetornarLibro() {\r\n        int indexRow = table.getSelectedRow();\r\n\r\n        for (int i = 0; i < table.getRowCount(); i++) {\r\n            if (indexRow == i) {\r\n                boolean data = (boolean) model.getValueAt(i, 2);\r\n                String usuario = JOptionPane.showInputDialog(null, \"Ingresa tu nombre\");\r\n                boolean validarUser = false;\r\n                // validó que el usuario tenga datos para control del boron cancel\r\n                if(usuario == null){\r\n                    JOptionPane.showMessageDialog(null, \"Acción Cancelada\");\r\n                }else if(!usuario.equals(\" \")){\r\n                    validarUser = true;\r\n                }\r\n                //valido que data no sea nulo (confirmar que tenga datos)\r\n                if (!data ) { // data == false\r\n                    if(validarUser){\r\n                        int dias = Integer.parseInt(JOptionPane.showInputDialog(null, \"Días que fue prestado el libro\"));\r\n                        int diasAtraso = dias - 7;\r\n                        String libro = (String) model.getValueAt(i, 0); // Obtengo el nombre del libro de acuerdo a la celda seleccionada\r\n                        model.setValueAt(true, indexRow, 2);\r\n                        Libros.data[i][2] = true;\r\n\r\n                        if (diasAtraso > 0) {\r\n                                int multa = diasAtraso * 1000;\r\n                                Prestamo.DiasAtraso.add(diasAtraso);\r\n                                // Mando los datos al constructor de la instancia\r\n                                new Prestamo(usuario, libro, multa);\r\n                                for(int ignored : Prestamo.multa){ // recorro con el forech las multas\r\n                                    JOptionPane.showMessageDialog(null, usuario + \" por demora en la entrega tiene una multa de: \" + multa);\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                JOptionPane.showMessageDialog(null, \"No se debe cobrar ninguna multa.\");\r\n                            }\r\n                    }\r\n                } else {\r\n                    JOptionPane.showMessageDialog(null, \"El libro ya esta en la biblioteca\");\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        model.fireTableDataChanged();\r\n    }\r\n\r\n    // ActionListener para los Jmenuitem\r\n    ActionListener Action2 = new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n\r\n            // Se crea un jmenuitem al cual se le asigna el jmenuitem presionado\r\n            JMenuItem jm = (JMenuItem) e.getSource();\r\n\r\n            // Sí se presiona el Jmenuitem mostrar del jmenu personasMora\r\n            if (jm == mostrar) {\r\n                // creo un iterador para recorrer multa, ListIterator recorre en cualquier dirección la lista (es un puntero)\r\n                ListIterator<Integer> data = Prestamo.multa.listIterator();\r\n                // StringBuilder permite concatenar diferentes cadenas de texto sin crear un nuevo object (es mutable, permite modificar su estado)\r\n                StringBuilder deudores = new StringBuilder();\r\n                boolean hayDeudores = false;\r\n\r\n                while (data.hasNext()) { // Me aseguro que recorra el data\r\n                    int multa = data.next(); // itero sobre la lista\r\n                    if (multa > 0) {\r\n                        hayDeudores = true;\r\n                        // Construir una cadena con la información de los deudores con StringBuilder\r\n                        deudores.append(\"Usuarios en Mora: \").append(Prestamo.user).append(\"\\n\").append(\"Libros prestados: \").append(Prestamo.book).append(\"\\n\")\r\n                                .append(\"Multa correspondiente: \").append(Prestamo.multa).append(\"\\n\");\r\n                    }\r\n                    break;\r\n                }\r\n                // Mostrar cuadro de texto con los deudores cuando es true\r\n                if (hayDeudores) {\r\n                    JOptionPane.showMessageDialog(null, deudores.toString());\r\n                } else {\r\n                    JOptionPane.showMessageDialog(null, \"Todos los usuarios a paz y salvo\");\r\n                }\r\n            }\r\n\r\n            // Al presionar el jmenuitem terror este mostrará un cuadro de txt donde\r\n            // apareceran los nombre y el estado de cada libro de terror\r\n            if (jm == terror) {\r\n                JOptionPane.showMessageDialog(null,\r\n                        \"Nombre: \" + Libros.data[0][0] + \"    Estado: \" + Libros.data[0][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[1][0] + \"    Estado: \" + Libros.data[1][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[2][0] + \"    Estado: \" + Libros.data[2][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[3][0] + \"    Estado: \" + Libros.data[3][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[4][0] + \"    Estado: \" + Libros.data[4][2] + \"\\n\", \"Libros Terror\", JOptionPane.PLAIN_MESSAGE);\r\n            }\r\n\r\n            // Al presionar el jmenuitem novela este mostrará un cuadro de txt donde\r\n            // apareceran los nombre y el estado de cada libro de novels Classics\r\n            if (jm == novela) {\r\n                JOptionPane.showMessageDialog(null,\r\n                        \"Nombre: \" + Libros.data[5][0] + \"    Estado: \" + Libros.data[5][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[6][0] + \"    Estado: \" + Libros.data[6][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[7][0] + \"    Estado: \" + Libros.data[7][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[8][0] + \"    Estado: \" + Libros.data[8][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[9][0] + \"    Estado: \" + Libros.data[9][2] + \"\\n\", \"Libros Novela\", JOptionPane.PLAIN_MESSAGE);\r\n            }\r\n\r\n            // Al presionar el jmenuitem inge este mostrará un cuadro de txt donde\r\n            // apareceran los nombre y el estado de cada libro de engineering\r\n            if (jm == inge) {\r\n                JOptionPane.showMessageDialog(null,\r\n                        \"Nombre: \" + Libros.data[10][0] + \"    Estado: \" + Libros.data[10][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[11][0] + \"    Estado: \" + Libros.data[11][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[12][0] + \"    Estado: \" + Libros.data[12][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[13][0] + \"    Estado: \" + Libros.data[13][2] + \"\\n\" +\r\n                                \"Nombre: \" + Libros.data[14][0] + \"    Estado: \" + Libros.data[14][2] + \"\\n\", \"Libros Ingeniería\", JOptionPane.PLAIN_MESSAGE);\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {     // ActionListener para los botones\r\n        JButton jb = (JButton) e.getSource();\r\n        if (jb == bCrearCuentas) {\r\n            setVisible(false);\r\n            new InCrearUs();\r\n        }\r\n        if (jb == bPrestarLibro) {\r\n            Prestarlibro();\r\n        }\r\n        if (jb == bVolver) {\r\n            setVisible(false);\r\n            new InLogin();\r\n        }\r\n        if (jb == bRetornarLibro) {\r\n            RetornarLibro();\r\n        }\r\n        if(jb == bInfo){\r\n            MostrarInfo();\r\n        }\r\n        if(jb == bCrearLib){\r\n            setVisible(false);\r\n            new InCrearLib();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Interfaz/InBiblioteca.java b/src/Interfaz/InBiblioteca.java
--- a/src/Interfaz/InBiblioteca.java	(revision 7ad151ddc612cc30a9b9cb95549044dc259dc272)
+++ b/src/Interfaz/InBiblioteca.java	(date 1686929855317)
@@ -37,6 +37,8 @@
     // JLabel
     JLabel lCrearCuenta;
 
+    ManejoArchivo manejoArchivo = new ManejoArchivo();
+
     // Crear un modelo de tabla y agregar los datos
     DefaultTableModel model = new DefaultTableModel((Object[][]) ManejoArchivo.getDataRow(Principal.rutaArchivo), InCrearLib.getNomColumnas()) {
         // Se deshabilita la opción de modificar las filas y las columnas
